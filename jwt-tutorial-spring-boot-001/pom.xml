<?xml version="1.0"?>
<project
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>jwt-tutorial-spring-boot-001</artifactId>
  <name>jwt-tutorial-spring-boot-001</name>
  <url>https://levigo.de/info/x/4pZdBg</url>

  <parent>
    <groupId>org.jwt</groupId>
    <artifactId>jwt-tutorial</artifactId>
    <version>5.10.0.10</version>
  </parent>

  <properties>
    <!-- General project settings -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>

    <!-- levigo dependencies -->
    <jwt.version>5.10.0.10</jwt.version>

    <!-- GWT dependencies -->
    <gwt.version>2.9.0</gwt.version>

    <!-- Docker image name -->
    <docker.image.name>${project.artifactId}</docker.image.name>
    <!-- A custom registry can be used by prepending the registry name like
      the following example -->
    <!-- <docker.image.name>registry.container.levigo.de:5000/${project.artifactId}</docker.image.name> -->


    <dockerfile-maven-plugin.version>1.4.9</dockerfile-maven-plugin.version>
  </properties>

  <dependencies>
    <!-- Dependency versions are managed by parent / imported BOMs -->

    <!-- JWT via Spring-Boot Starter -->
    <dependency>
      <groupId>com.levigo.jadice.webtoolkit</groupId>
      <artifactId>webtoolkit-spring-boot-starter</artifactId>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <!-- Let's import the jadice web toolkit bill of material. JWT dependency
        versions will be managed via this BOM. -->
      <dependency>
        <groupId>com.levigo.jadice.webtoolkit</groupId>
        <artifactId>webtoolkit-spring-boot-bom</artifactId>
        <version>${jwt.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <!-- We use the assembly plugin to copy the index.html to the 'public'
        folder -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>assemble</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/all.xml</descriptor>
              </descriptors>
              <appendAssemblyId>false</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Use spring boot maven plugin to create an executable JAR with all
        dependencies -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>2.1.0.RELEASE</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <exclude>
              <groupId>com.google.gwt</groupId>
              <artifactId>gwt-dev</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>

      <!-- We use the gwt maven plugin to compile the client side javascript
        files from java sources -->
      <plugin>
				<groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
				<version>${gwt.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>resources</goal>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <failOnError>true</failOnError>
          <inplace>true</inplace>
        </configuration>
      </plugin>


      <!-- We use https://github.com/spotify/dockerfile-maven -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>${dockerfile-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>build-image</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <tag>${project.version}</tag>
          <repository>${docker.image.name}</repository>
        </configuration>
      </plugin>

      <!-- On clean, also delete the temporary /src/main/gwt-unit-cache folder
        which is created by the gwt compiler -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.4.1</version>
        <executions>
          <execution>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <filesets>
                <fileset>
                  <directory>src/main/gwt-unitCache</directory>
                  <includes>
                    <include>**</include>
                  </includes>
                  <followSymlinks>false</followSymlinks>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
